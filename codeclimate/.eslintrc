# Welcome to the future!  If you don't lint you are setting yourself up
# for issues in the future.
#
# I've gone with some default confi using AirBnB as a guide and eslint docs
# I'm only disabling / enabling rules as they seem to make sense, obviously
# as more people use this there will be more discussion over things such as styles
# but for the record, the more consistent we are with writing code and that means
# styling stuff the easier it is for another dev to pick up code and get it
{
  env: {
    browser: true,
    es6: true,
    node: true
  },

  globals: {
    document: false,
    escape: false,
    navigator: false,
    unescape: false,
    window: false,
    describe: true,
    before: true,
    it: true,
    expect: true,
    sinon: true
  },

  extends: ["eslint:recommended", "airbnb"],

  parser: "babel-eslint",

  plugins: [
    "react"
  ],

  rules: {
    # # Possible Errors
    # for-direction: "error",
    # no-await-in-loop: "warn",
    # no-compare-neg-zero: "error",
    # no-cond-assign: "error",
    # no-console: "warn",
    # no-constant-condition: "off",
    # no-control-regex: "error",
    no-debugger: "warn",
    # no-dupe-args: "error",
    # no-dupe-keys: "error",
    # no-duplicate-case: "error",
    # no-empty: "warn",
    # no-empty-character-class: "error",
    # no-ex-assign: "error",
    # no-extra-boolean-cast: "error",
    # no-extra-parens: "off",
    # no-extra-semi: "error",
    # no-func-assign: "error",
    # no-inner-declarations: ["error", "functions"],
    # no-invalid-regexp: "error",
    # no-irregular-whitespace: "error",
    # no-obj-calls: "error",
    # no-regex-spaces: "error",
    # no-sparse-arrays: "error",
    # no-template-curly-in-string: "error",
    # no-unexpected-multiline: "error",
    # no-unreachable: "error",
    # no-unsafe-finally: "error",
    # no-unsafe-negation: "error",
    # use-isnan: "error",
    # valid-jsdoc: "error",
    # valid-typeof: "error",
    #
    # # Best Practices
    # array-callback-return: "error",
    # block-scoped-var: "error",
    class-methods-use-this: "off",
    # complexity: ["error", { max: 3 }],
    # consistent-return: "error",
    # curly: ["error", "multi-line"],
    # default-case: "off",
    # dot-location: ["error", "property"],
    # dot-notation: ["error", { allowKeywords: false }],
    # eqeqeq: ["error", "allow-null"],
    # guard-for-in: "off",
    # no-alert: "error",
    # no-caller: "error",
    # no-case-declarations: "error",
    # no-div-regex: "error",
    # no-else-return: "error",
    # no-empty-function: "error",
    # no-empty-pattern: "error",
    # no-eq-null: "error",
    # no-eval: "error",
    # no-extend-native: "error",
    # no-extra-bind: "error",
    # no-fallthrough: "error",
    # no-floating-decimal: "error",
    # no-global-assign: "error",
    # no-implicit-coercion: "error",
    # no-implicit-globals: "error",
    # no-implied-eval: "error",
    # no-invalid-this: "error",
    # no-iterator: "error",
    # no-labels: "error",
    # no-lone-blocks: "error",
    # no-loop-func: "off",
    # no-magic-numbers: "error",
    no-multi-spaces: ["error", { exceptions: { AssignmentExpression: true, VariableDeclarator: true, ImportDeclaration: true } }],
    # no-multi-str: "error",
    # no-new: "error",
    # no-new-func: "error",
    # no-new-wrappers: "error",
    # no-octal: "error",
    # no-octal-escape: "error",
    no-param-reassign: ["error", { props: false }],
    # no-proto: "error",
    # no-redeclare: "error",
    # no-restricted-modules: "off",
    # no-return-assign: "error",
    # no-return-await: "error",
    # no-script-url: "error",
    # no-self-assign: "error",
    # no-self-compare: "error",
    # no-sequences: "error",
    # no-throw-literal: "error",
    # no-unmodified-loop-condition: "warn",
    # no-unused-expressions: "off",
    # no-unused-labels: "error",
    # no-useless-call: "error",
    # no-useless-concat: "error",
    # no-useless-escape: "error",
    # no-useless-return: "error",
    # no-void: "off",
    # no-warning-comments: "warn",
    # no-with: "error",
    # prefer-promise-reject-errors: "error",
    # radix: "error",
    # require-await: "error",
    # vars-on-top: "error",
    # wrap-iife: ["error", "any"],
    # yoda: ["error", "never"],
    #
    # # Variables
    # no-catch-shadow: "off",
    # no-delete-var: "error",
    # no-label-var: "error",
    # no-shadow: "off",
    # no-shadow-restricted-names: "error",
    # no-undef: "error",
    # no-undef-init: "error",
    # no-undefined: "off",
    # no-unused-vars: ["error", { vars: "all", args: "none" }],
    # no-use-before-define: ["error", { classes: false, functions: true }],

    # Imports
    import/extensions: ["error", { js: "never", jsx: "never", json: "always" }],
    import/no-extraneous-dependencies: ["off"],
    import/no-unresolved: ["off"],
    import/prefer-default-export: ["off"],

    # Accessibility
    jsx-a11y/alt-text: "warn",
    jsx-a11y/anchor-is-valid: "off",
    jsx-a11y/click-events-have-key-events: "off",
    # jsx-a11y/anchor-is-valid: ["error", {
    #   components: ["Link"],
    #   specialLink: ["to", "hrefLeft", "hrefRight"],
    #   aspects: ["noHref", "invalidHref", "preferButton"]
    # }],
    jsx-a11y/no-static-element-interactions: "warn",

    # React
    react/self-closing-comp: ["off", { component: true, html: true }],
    react/jsx-closing-bracket-location: ["error", { selfClosing: "after-props", nonEmpty: "after-props" }],
    react/jsx-pascal-case: "error",
    # No good solution for dealing with injected props/actions from redux
    react/prop-types: ["off"],
    # # Node.js and Common.js
    # handle-callback-err: ["error", "^(err|error|anySpecificError)$" ],
    # no-mixed-requires: "off",
    # no-new-require: "error",
    # no-path-concat: "off",
    # no-process-env: "off",
    # no-process-exit: "off",
    # no-sync: "off",
    #
    # # Stylistic Issues
    # array-bracket-spacing: ["error", "always", { objectsInArrays: false }],
    # brace-style: ["error", "1tbs", { allowSingleLine: true }],
    # camelcase: ["error", { properties: "always" }],
    # capitalized-comments: ["off"],
    comma-dangle: ["off"],
    # comma-spacing: ["error", { before: false, after: true }],
    # comma-style: ["error", "last"],
    # consistent-this: "error",
    # eol-last: "error",
    # func-call-spacing: ["error", "never"],
    # func-names: "off",
    # func-style: "off",
    indent: ["error", 2, { FunctionDeclaration: { body: 1, parameters: 1 }, SwitchCase: 1 }],
    jsx-quotes: ["error", "prefer-double"],
    key-spacing: ["error", { beforeColon: false, afterColon: true, mode: "minimum" }],
    # keyword-spacing: ["error", { before: true,  after: true }],
    # linebreak-style: "off",
    # max-depth: ["error", { max: 2 }],
    max-len: ["off", { code: 150, ignoreComments: true }],
    # max-nested-callbacks: ["error", { max: 3 }],
    # max-params: ["error", { max: 3 }],
    # max-statements: "off",
    # new-cap: ["error", { newIsCap: true, capIsNew: false }],
    # new-parens: "error",
    # no-array-constructor: "error",
    # no-bitwise: "off",
    # no-continue: "off",
    # no-inline-comments: "off",
    # no-lonely-if: "off",
    # no-mixed-operators: "error",
    # no-mixed-spaces-and-tabs: ["error", false],
    # no-multiple-empty-lines: ["error", { max: 1 }],
    # no-negated-condition: "error",
    # no-nested-ternary: "error",
    # no-new-object: "error",
    # no-plusplus: "error",
    # no-tabs: "error",
    # no-ternary: "off",
    # no-trailing-spaces: "error",
    # no-underscore-dangle: "error",
    # no-unneeded-ternary: "error",
    # object-curly-spacing: ["error", "always"],
    # one-var: "off",
    # operator-assignment: "off",
    # operator-linebreak: ["error", "after"],
    # padded-blocks: "off",
    # quote-props: ["error", "consistent-as-needed"],
    quotes: ["warn", "double", { avoidEscape: true, allowTemplateLiterals: true }],
    semi: ["warn", "never"],
    semi-spacing: "off",
    # sort-vars: "error",
    # space-before-blocks: ["error", "always"],
    space-before-function-paren: ["error", { anonymous: "always", named: "never" }],
    function-paren-newline: ["error", "consistent"],
    # space-in-parens: ["error", "never"],
    # space-infix-ops: "error",
    # space-unary-ops: ["error", { words: true, nonwords: false }],
    # spaced-comment: ["error", "always"],
    # wrap-regex: "off",
    #
    # strict: "off",
    #
    # # ES2015
    # placing arrow function body on same line could lead to long lines
    arrow-body-style: ["warn", "as-needed"],
    arrow-parens: ["warn", "as-needed"],
    # arrow-spacing: "error",
    # constructor-super: "error",
    # generator-star-spacing: ["error", { before: false, after: true }],
    # no-class-assign: "error",
    # no-confusing-arrow: "warn",
    # no-const-assign: "error",
    # no-dupe-class-members: "error",
    # no-duplicate-imports: "error",
    # no-this-before-super: "error",
    # no-useless-computed-key: "error",
    # no-useless-constructor: "error",
    # no-useless-rename: "error",
    # no-var: "error",
    # prefer-arrow-callback: "warn",
    # prefer-const: "warn",
    # prefer-destructuring: "warn",
    # prefer-numeric-literals: "error",
    # prefer-rest-params: "warn",
    # prefer-spread: "error",
    # prefer-template: "error",
    # rest-spread-spacing: ["error", "never"],
    # sort-imports: ["warn", { ignoreCase: true, memberSyntaxSortOrder: ["none", "single", "multiple", "all"] }],
    # template-curly-spacing: ["error", "never"],
  }
}
